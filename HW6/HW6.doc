//Carter Stevens
//ECE 331 HW6
//2/28/17

1) a)

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <time.h>
#include <sys/types.h>

int main(void){
	pid_t childpid;

	childpid = fork();
	
	//check if fork was successful
	if(childpid >= 0){
		//child process
		if(childpid == 0){
			while(1){
				sleep(1);
			}
		}
		//parent process
		else{
			//kill child process
			kill(childpid, SIGKILL);
			//wait so that processes could be checked
			sleep(10);
		}
	}
	//if fork failed
	else{
		printf("Fork failed\n");
		return 1;
	}
	return 0;
}

b)
TARGET=zombie
OBJS=zombies.o
CFLAGS=-g -Wall
LIBS=-lm

.PHONY: all clean

all: ${TARGET}
${TARGET}: ${OBJS}
	${CC} -o ${TARGET} ${OBJS} ${LIBS}

clean:
	rm -f ${TARGET} ${OBJS}

c) ran $ ps axo stat,ppid,pid,comm | grep -w defunct
   Z+   17814 17815 zombie <defunct>

2)a)
 TARGET=geometry
OBJS=geometry.o
CFLAGS=-g -Wall
LIBS=-lm

.PHONY: all clean

all: ${TARGET}
${TARGET}: ${OBJS}
	${CC} -o ${TARGET} ${OBJS} ${LIBS}

clean:
	rm -f ${TARGET} ${OBJS}

b)
#include <stdlib.h>
#include <stdio.h>
#include <sys/ioctl.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <linux/hdreg.h>
#include <linux/fs.h>

int main(void)
{
	//creates structure to hold SD card info
	struct hd_geometry *geo = (struct hd_geometry*)malloc(sizeof(struct hd_geometry));
	int status;

	//opens SD card file descriptor
	int sd = open("/dev/mmcblk0", O_RDONLY);
	//checks that file descriptor opened correctly
	if(sd < 0){
		printf("File failed to open\n");
		return 1;
	}
	//checks that allocation exited cleanly
	if (geo == NULL){
		printf("Unable to allocate struct\n");
		return 1;
	}
	//calls ioctl to populate structure
	status = ioctl(sd, HDIO_GETGEO, geo);
	//checks if ioctl failed
	if(status < 0){
		printf("IOCTL failed\n");
		return 1;
	}
	//print information
	printf("SD Card Heads: %u\n", geo->heads);
	printf("SD Card Sectors: %u\n", geo->sectors);
	printf("SD Card Cylinders: %d\n", geo->cylinders);
	printf("SD Card Start: %lu\n", geo->start);
	//free allocated memory
	free(geo);
	return 0;
}

3) Completed

4) completed

5) ps -A --no-headers | wc -l
   inspired by stack exchange answers

6) ps -eo vsz --no-headers | paste -s -d+ | bc

7) find . -size +10k -exec ls -lh {} \+
   found on stack exchange 
