Carter Stevens
ECE 331 HW1

1) Openvim tutorial completed

2) Kernel Coding Style document read

3)a)

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int main(int argc, char *argv[])
{
	int i;

	if (argc > 1){
		for (i = 1; i < argc; i++){
			printf("%s\t",argv[i]);
		}
		printf("\n");
	}
	return 0;
}

b) ./args "Game of Thrones \$eason 1 Episode 4.mp4" *[\\][\\][\\][\\]*

4)

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <stdint.h>

int main(int argc, char *argv[])
{
	int buffsize = atoi(argv[1]);
	char *values;
	struct timespec start, end;
	//uint64_t time;
	FILE *fp;
	char timestr[256];

	//open file for data output
	fp = fopen("timing.dat", "a");
	//make sure there is one argument
	if (argc < 2 || argc > 2){
		printf("Program requires one argument\n");
		return 1;
	}
	//allocate argument number of integers
	values = (char *) malloc(sizeof(char)*buffsize);
	if (values == NULL){
		printf("Allocation failed\n");
		return 1;
	}
	//get start time
	clock_gettime(CLOCK_MONOTONIC, &start);
	//access buffer and set values
	//for (i=0; i<buffsize; i++){
	//	values[i] = buffsize;
	//}
	memset(values, buffsize, sizeof(char)*buffsize);
	//get end time
	clock_gettime(CLOCK_MONOTONIC, &end);
	//report times
	printf("Bytes allocated: %d\n", buffsize);
	printf("Start Time: %lds, %lluns\n",(long int) start.tv_sec, (long long unsigned int) start.tv_nsec);
	printf("End Time: %lds, %lluns\n", (long int) end.tv_sec, (long long unsigned int) end.tv_nsec);
	//time = end.tv_nsec - start.tv_nsec;

	fputs(argv[1] , fp);
	fputs("\t" , fp);

	sprintf(timestr, "%ld", (long int) start.tv_sec);
	fputs(timestr , fp);
	fputs("\t", fp);

	sprintf(timestr, "%lld", (long long unsigned int) start.tv_nsec);
	fputs(timestr , fp);
	fputs("\t", fp);

	sprintf(timestr, "%ld", (long int) end.tv_sec);
	fputs(timestr , fp);
	fputs("\t", fp);

	sprintf(timestr, "%lld", (long long unsigned int) end.tv_nsec);
	fputs(timestr , fp);
	fputs("\n" , fp);

	fclose(fp);

	//printf("Elapsed time accessing memory: %llu nanoseconds\n", (long long unsigned int) time);
	free(values);
	return 0;
}

5)

#! /usr/bin/octave -qf

data = load("timing.dat");
bytes = data(:,1);
start_time_seconds = data(:,2);
start_time_nseconds = data(:,3);
end_time_seconds = data(:,4);
end_time_nseconds = data(:,5);
start_time = (1000000000.*start_time_seconds).+start_time_nseconds;
end_time = (1000000000.*end_time_seconds)+end_time_nseconds;
times_ns = end_time .- start_time;
times_s = times_ns./1000000000;
Mbytes = bytes./1000000;
speeds = Mbytes./times_s;

semilogx(bytes, speeds, ".r", "linestyle", "-")
title("Speed of Memory Access vs. Buffer Size")
xlabel("Data Size (Bytes)")
ylabel("Memory Speed (MB/s)")
pause()

6)a) The purpose of the /sys directory is to act as a pseudo file system 
     (created by the kernel) to provide information about subsystems and 
     connected devices.

  b) /usr/lib/ requires that all architecture-dependent data exclusively 
     used by an application must be placed within the same subdirectory.

7) SSH key left over from last year. Silver linings to an F 

8)
a) alias ll="ll -alF --color"
b) ls -X
c) mv x /tmp/
   mv /tmp/x /tmp/y
d) rm -f *{10..25}*
